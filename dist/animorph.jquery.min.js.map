{"version":3,"file":null,"sources":["../src/utils/dom-manipulation.js","../src/utils/animation.js","../src/vanilla.js","../src/jquery.js"],"sourcesContent":["/**\n * Removes the given element from it's parent\n *\n * @param  {HTMLElement} node The node to remove\n */\nexport function detachNode (node) {\n  // Detach from dom before any classes are added\n  if (node.parentNode) {\n    node.parentNode.removeChild(node);\n  }\n}\n\n/**\n * Adds the given element as the first child of the given parent\n *\n * @param  {HTMLElement} node The node to remove\n * @param  {HTMLElement} targetContainer The new parent\n */\nexport function prependNode (node, targetContainer) {\n  if (targetContainer.firstChild) {\n    targetContainer.insertBefore(node, targetContainer.firstChild);\n  } else {\n    targetContainer.appendChild(node);\n  }\n}\n\n/**\n * Clones a given Node an all its content\n * Needed as IE9 does not support node.clone(true)\n *\n * @param  {HTMLElement} node The node to clone\n * @returns  {HTMLElement}\n */\nexport function cloneNode (node) {\n  const clone = node.cloneNode(false);\n  clone.innerHTML = node.innerHTML;\n  return clone;\n}\n\n/**\n * Shorthand to attach a element to the dom\n *\n * @param  {HTMLElement} node The element which should be added\n * @param  {HTMLElement} target The reference element/parent\n * @param  {String} domOperation The dom operation name\n */\nexport function attachNode (node, target, domOperation) {\n  switch (domOperation) {\n    case 'appendTo':\n      target.appendChild(node);\n      break;\n    case 'prependTo':\n      prependNode(node, target);\n      break;\n    case 'insertAfter':\n      node.insertAdjacentElement('afterend', target);\n      break;\n    default:\n      throw new Error('Invalid dom operation');\n  }\n}\n\n/**\n * Disables all transitions for the given node\n *\n * @param  {HTMLElement} node The element\n */\nexport function disableTransitions (node) {\n  node.style.transition = 'none';\n}\n\n/**\n * Reverts disableTransitions\n *\n * @param  {HTMLElement} node The element\n */\nexport function enableTransitions (node) {\n  node.style.transition = '';\n}\n\n/**\n * Returns the absolute position of the node to the document\n *\n * @param  {HTMLElement} node The element to measure\n * @return {{left: {Number}, top: {Number} }\n */\nexport function getElementPosition (node) {\n  const rect = node.getBoundingClientRect();\n  const offset = {\n    top: rect.top + document.body.scrollTop,\n    left: rect.left + document.body.scrollLeft\n  };\n  return offset;\n}\n\n/**\n * Returns a Promise which is resolved after delay of (transition duration + transition delay).\n *\n * This is a replacement for onTransitionEnd as we can't guarantee that an animation started\n * and would wait forever.\n *\n * @param  {HTMLElement} node The element with a css-transition\n * @return {Promise}\n */\nexport function waitUntilTransitionEnd (node) {\n  const duration = getTransitionDuration(node) + getTransitionDelay(node);\n  return new Promise((resolve) => {\n    setTimeout(() => resolve(node), duration);\n  });\n}\n\n/**\n * Extract an array of all classNames of the given DOM or SVG node\n *\n * @param  {HTMLElement} element The element\n * @return {String[]} Classes\n */\nfunction getClassNames (element) {\n  const className = element.getAttribute && element.getAttribute('class') || '';\n  return className === '' ? [] : className.split(' ');\n}\n\n/**\n * Replacement for DomTokenList\n *\n * IE 9 doesn't support element classList and IE 11 doesn't support classList for SVG elements\n * see also https://developer.mozilla.org/en/docs/Web/API/Element/classList\n *\n * Usage:\n * toggleClass(div, 'demo'); // Toggles the class `demo`\n * toggleClass(div, 'demo', true); // Adds the class `demo`\n * toggleClass(div, 'demo', false); // removes the class `demo`\n *\n * @param  {HTMLElement} element The target node\n * @param  {String} className The class name to toggle\n * @param  {boolean} force Optional - true will allways add - false will alawys remove\n */\nexport function toggleClass (element, className, force) {\n  const classNames = getClassNames(element);\n  const idx = classNames.indexOf(className);\n  const hasClass = idx !== -1;\n  const shouldHaveClass = force !== undefined ? force : !hasClass;\n  // Break if classes are already set/removed\n  if (shouldHaveClass === hasClass) {\n    return;\n  }\n  // Remove class\n  if (!shouldHaveClass) {\n    classNames.splice(idx, 1);\n  }\n  // Add class\n  if (shouldHaveClass) {\n    classNames.push(className);\n  }\n  element.setAttribute('class', classNames.join(' '));\n}\n\n/**\n * Remove the given class name from the element\n * @param  {HTMLElement} element The DOM Node\n * @param  {String} className The class name\n */\nexport function removeClass (element, className) {\n  if (className === undefined) {\n    throw new Error('Class name is required');\n  }\n  toggleClass(element, className, false);\n}\n\n/**\n * Adds the given class name from the element\n * @param  {HTMLElement} element The DOM Node\n * @param  {String} className The class name\n */\nexport function addClass (element, className) {\n  if (className === undefined) {\n    throw new Error('Class name is required');\n  }\n  toggleClass(element, className, true);\n}\n\n/**\n * Turns \"2s\" or \"2000ms\" into 2000\n * @param  {string} timeString A unit postfixed time string\n * @return {number} milliseconds\n */\nfunction stringToMilliSeconds (timeString) {\n  const timeUnits = {\n    s: 1000,\n    ms: 1\n  };\n  const parsedTime = /([\\d\\.]+)\\s*(\\D+)/.exec(timeString);\n  return parsedTime ? parseFloat(parsedTime[1], 10) * timeUnits[parsedTime[2]] : 0;\n}\n\n/**\n * Returns the duration of an elements transition\n * @param  {HTMLElement} node The element to measure\n * @return {Number} time in milliseconds\n */\nexport function getTransitionDuration (node) {\n  return stringToMilliSeconds(window.getComputedStyle(node).transitionDuration);\n}\n\n/**\n * Returns the delay of an elements transition\n * @param  {HTMLElement} node The element to measure\n * @return {Number} time in milliseconds\n */\nexport function getTransitionDelay (node) {\n  return stringToMilliSeconds(window.getComputedStyle(node).transitionDelay);\n}\n\n/**\n * Force a browser repaint to apply all current styles\n *\n * @param node\n */\nexport function forceReflow (node) {\n  return new Promise((resolve) => {\n    resolve(node.offsetHeight);\n  });\n}\n\n/**\n * Checks if node is a dom element\n * @param node\n * @returns {*}\n */\nexport function isDomElement (node) {\n  // For all modern browser\n  if (window.HTMLElement) {\n    return node instanceof window.HTMLElement;\n  }\n  // For IE9 <3\n  return node && typeof node === 'object' && node.nodeType === 1 && node.nodeName;\n}\n","import { addClass, removeClass, detachNode, attachNode, cloneNode, waitUntilTransitionEnd, enableTransitions, disableTransitions, getTransitionDelay, forceReflow } from './dom-manipulation';\n\n/**\n * An animation which adds the `enter` classes and adds the element to the dom\n *\n * @param  {String} namespace     The animation class namespace e.g. 'am'\n * @param  {String[]} addClasses  Classes which will be added once the animation starts\n * @param  {String[]} removeClasses Classes which will be removed once the animation starts\n * @param  {[type]} element       The element\n * @param  {[type]} target        Optional - needed as reference to add the element into DOM\n * @param  {[type]} operation     Optional - needed to add the element into DOM\n * @return {Promise} A promise which will be resolved once the animation is complete\n */\nexport function enterAnimation ({\n  namespace,\n  addClasses,\n  removeClasses,\n  element,\n  target,\n  operation,\n  animationIndex\n}) {\n  if (target) {\n    attachNode(element, target, operation);\n  }\n  return animation({\n    namespace,\n    element,\n    addClasses,\n    removeClasses,\n    animationIndex,\n    animationName: 'enter'\n  });\n}\n\n/**\n * An animation which adds the `leave` classes and adds the element to the dom\n *\n * @param  {String} namespace     The animation class namespace e.g. 'am'\n * @param  {[type]} element       [description]\n * @param  {String[]} addClasses  Classes which will be added once the animation starts\n * @param  {String[]} removeClasses Classes which will be removed once the animation starts\n * @return {Promise} A promise which will be resolved once the animation is complete\n */\nexport function leaveAnimation ({\n  namespace,\n  element,\n  addClasses,\n  removeClasses,\n  animationIndex\n}) {\n  return animation({\n    namespace,\n    element,\n    addClasses,\n    removeClasses,\n    animationIndex,\n    animationName: 'leave'\n  });\n}\n\n/**\n * An animation which morphs an element from its old position to its new position\n *\n * @param  {String} namespace        The animation class namespace e.g. 'am'\n * @param  {String[]} addClasses     Classes which will be added once the animation starts\n * @param  {String[]} removeClasses  Classes which will be removed once the animation starts\n * @param  {HTMLElement} element     The element to animate\n * @param  {HTMLElement} target      The reference target to attach the element into the DOM\n * @param  {HTMLElement} operation   The attach method\n * @param  {HTMLElement} morphParent The wrapper for the move clone\n * @return {Promise} A promise which will be resolved once the animation is complete\n */\nexport function morphAnimation ({\n  namespace,\n  addClasses,\n  removeClasses,\n  element,\n  target,\n  operation,\n  morphParent,\n  animationIndex\n}) {\n  if (element instanceof window.HTMLElement === false) {\n    throw new Error('target is required');\n  }\n  // Create clones which are needed for the morph effect\n  const leavePlaceholder = _createLeavePlaceholder(element);\n  const movePlaceholder = _createMovePlaceholder(element, morphParent);\n\n  addClasses.forEach((className) => addClass(element, className));\n  removeClasses.forEach((className) => removeClass(element, className));\n  // Wait for all animations to finish\n  return Promise.all([\n    enterAnimation({\n      namespace,\n      addClasses: [],\n      removeClasses: [],\n      element,\n      target,\n      operation,\n      animationIndex\n    }),\n    moveAnimation({\n      namespace,\n      addClasses,\n      removeClasses,\n      element: movePlaceholder,\n      morphParent,\n      target: element,\n      animationIndex\n    }),\n    removeAnimation({\n      namespace,\n      addClasses: [],\n      removeClasses: [],\n      element: leavePlaceholder,\n      animationIndex\n    })\n  ]).then(() => {\n    detachNode(movePlaceholder);\n  });\n}\n\n/**\n * This animation will add the leave classes and remove the element form the\n * DOM once the animation is complete\n *\n * @param  {Object} options All leaveAnimation options\n * @return {Promise}\n */\nexport function removeAnimation (options) {\n  return leaveAnimation(options).then(() => detachNode(options.element));\n}\n\n/**\n * Moves the given element to the target Position\n *\n * @param  {String} namespace     The animation class namespace e.g. 'am'\n * @param  {String[]} addClasses  Classes which will be added once the animation starts\n * @param  {String[]} removeClasses Classes which will be removed once the animation starts\n * @param  {[type]} element       [description]\n * @param  {[type]} target        [description]\n * @param  {[type]} morphParent   [description]\n * @return {Promise} A promise which will be resolved once the animation is complete\n */\nfunction moveAnimation ({\n  namespace,\n  addClasses,\n  removeClasses,\n  element,\n  target,\n  morphParent,\n  animationIndex\n}) {\n  const targetPosition = _getElementPosition(target);\n  const parentPosition = _getElementPosition(morphParent);\n  const top = targetPosition.top - parentPosition.top;\n  const left = targetPosition.left - parentPosition.left;\n  return animation({\n    namespace,\n    element,\n    addClasses,\n    removeClasses,\n    animationIndex,\n    animationName: 'move',\n    onAnimationStart: () => {\n      element.style.position = 'absolute';\n      element.style.left = `${left}px`;\n      element.style.top = `${top}px`;\n    }\n  });\n}\n\n/**\n * Helper function which does the entire animation from start to cleanup\n *\n * @param  {String} namespace       The animation class namespace e.g. 'am'\n * @param  {String[]} addClasses    Classes which will be added once the animation starts\n * @param  {String[]} removeClasses Classes which will be removed once the animation starts\n * @param  {HTMLElement} element    The Element which to animate\n * @param  {HTMLElement} morphParent   [description]\n * @param  {function} [onAnimationStart=(] [description]\n * @return {Promise} A promise which will be resolved once the animation is complete\n */\nfunction animation ({\n  namespace,\n  addClasses,\n  removeClasses,\n  element,\n  animationName,\n  animationIndex,\n  onAnimationStart = () => {}\n}) {\n  return _startAnimation({\n    namespace,\n    element,\n    addClasses,\n    removeClasses,\n    animationName,\n    animationIndex\n  })\n  .then(onAnimationStart)\n  .then(() => waitUntilTransitionEnd(element))\n  .then(() => _removeAnimationClasses({\n    namespace,\n    element,\n    animationName\n  }));\n}\n\nfunction _createLeavePlaceholder (node) {\n  const clone = cloneNode(node);\n  node.insertAdjacentElement('afterend', clone);\n  return clone;\n}\n\n/**\n * Create a clone and place it absolute directly above the given node\n *\n * @param  {HTMLElement} node        The node to clone\n * @param  {HTMLElement} morphParent The parent for the clone\n * @return {HTMLElement} clone\n */\nfunction _createMovePlaceholder (node, morphParent) {\n  const clone = cloneNode(node);\n  const elementPosition = _getElementPosition(node);\n  const parentPosition = _getElementPosition(morphParent);\n  const top = elementPosition.top - parentPosition.top;\n  const left = elementPosition.left - parentPosition.left;\n  clone.style.position = 'absolute';\n  clone.style.left = `${left}px`;\n  clone.style.top = `${top}px`;\n  document.body.insertAdjacentElement('afterend', clone);\n  return clone;\n}\n\nfunction _startAnimation ({\n  namespace,\n  element,\n  addClasses,\n  removeClasses,\n  animationIndex,\n  animationName = 'enter'\n}) {\n  const staggeringDuration = _getStaggering({element, animationIndex, animationName, namespace});\n  disableTransitions(element);\n  addClass(element, `${namespace}-${animationName}-prepare`);\n  addClass(element, `${namespace}-${animationName}`);\n  addClass(element, `${namespace}-animate`);\n  return new Promise((resolve) => {\n    setTimeout(resolve, staggeringDuration);\n  }).then(() => forceReflow(element).then(() => {\n    forceReflow(element);\n    removeClass(element, `${namespace}-${animationName}-prepare`);\n    addClass(element, `${namespace}-${animationName}-active`);\n    addClasses.forEach((className) => addClass(element, className));\n    removeClasses.forEach((className) => removeClass(element, className));\n    enableTransitions(element);\n  }));\n}\n\nfunction _getElementPosition (node) {\n  const rect = node.getBoundingClientRect();\n  const offset = {\n    top: rect.top + document.body.scrollTop,\n    left: rect.left + document.body.scrollLeft\n  };\n  return offset;\n}\n\nfunction _removeAnimationClasses ({element, animationName, namespace}) {\n  disableTransitions(element);\n  return forceReflow(element)\n  .then(() => {\n    removeClass(element, `${namespace}-animate`);\n    removeClass(element, `${namespace}-${animationName}`);\n    removeClass(element, `${namespace}-${animationName}-active`);\n    enableTransitions(element);\n  });\n}\n\nfunction _getStaggering ({element, animationIndex, animationName, namespace}) {\n  const delayWithoutStagger = getTransitionDelay(element);\n  addClass(element, `${namespace}-${animationName}-stagger`);\n  const delayWithStagger = getTransitionDelay(element);\n  removeClass(element, `${namespace}-${animationName}-stagger`);\n  return delayWithoutStagger === delayWithStagger ? 0 : delayWithStagger * animationIndex;\n}\n","import {\n  morphAnimation,\n  enterAnimation,\n  leaveAnimation,\n  removeAnimation\n} from './utils/animation';\n\nimport {\n  isDomElement\n} from './utils/dom-manipulation';\n\n// Mapping of dom operation to animation\nconst operations = {\n  appendTo: morphAnimation,\n  prependTo: morphAnimation,\n  insertBefore: morphAnimation,\n  insertAfter: morphAnimation,\n  remove: removeAnimation,\n  enter: enterAnimation,\n  leave: leaveAnimation\n};\n\nexport function animorph (element, {\n  namespace = 'am',\n  addClasses = [],\n  removeClasses = [],\n  target,\n  operation = 'appendTo',\n  morphParent = document.body\n}) {\n  let animation = operations[operation];\n  if (!animation) {\n    throw new Error(`Invalid operation '${operation}'`);\n  }\n\n  if (typeof addClasses === 'string') {\n    addClasses = addClasses.split(/\\s*(?:\\s|,)\\s*/);\n  }\n\n  if (typeof removeClasses === 'string') {\n    removeClasses = removeClasses.split(/\\s*(?:\\s|,)\\s*/);\n  }\n  // Turn element from a single element or a node list or an array to an array:\n  const elements = isDomElement(element) ? [element] : Array.prototype.slice.call(element);\n  return Promise.all(elements.map((element, animationIndex) => {\n    if (!isDomElement(element)) {\n      throw new Error('Element is required');\n    }\n    // If we can't use a move animation fallback to an enter animation\n    if (animation === morphAnimation && !morphParent.contains(element)) {\n      animation = enterAnimation;\n    }\n    return animation({\n      animationIndex,\n      namespace,\n      addClasses,\n      removeClasses,\n      element,\n      target,\n      operation,\n      morphParent\n    });\n  }));\n}\n\nexport function appendTo (element, target, options = {}) {\n  return animorph(element, {\n    target,\n    ...options\n  });\n}\n\nexport function prependTo (element, target, options = {}) {\n  return animorph(element, {\n    target,\n    operation: 'prependTo',\n    ...options\n  });\n}\n\nexport function remove (element, options = {}) {\n  return animorph(element, {\n    operation: 'remove',\n    ...options\n  });\n}\n\nexport function leave (element, options = {}) {\n  return animorph(element, {\n    operation: 'leave',\n    ...options\n  });\n}\n\nexport function insertAfter (element, target, options = {}) {\n  return animorph(element, {\n    target: target,\n    operation: 'insertAfter',\n    ...options\n  });\n}\n\n/**\n * Allows to animate from one set of classes to another\n *\n * @param  {HTMLElement} element        The element to animate\n * @param  {String[]} classNamesBefore  Class names before\n * @param  {String[]} classNamesAfter   Class names after\n * @param  {String} [transitionName]     Transition name (enter or leave)\n * @param  {Object} [options={}]        Animorph options like namespace\n * @return {Promise}                    Promise of the animation\n */\nexport function replaceClasses (element, classNamesBefore, classNamesAfter, transitionName = 'enter', options = {}) {\n  return animorph(element, {\n    addClasses: classNamesAfter,\n    removeClasses: classNamesBefore,\n    operation: transitionName,\n    ...options\n  });\n}\n","import {appendTo, prependTo, remove, leave, insertAfter, replaceClasses} from './vanilla.js';\nimport $ from 'jquery';\n\n$.fn.amAppendTo = function (target, options) {\n  return appendTo(this.toArray(), $(target)[0], options);\n};\n\n$.fn.amPrependTo = function (target, options) {\n  return prependTo(this.toArray(), $(target)[0], options);\n};\n\n$.fn.amRemove = function (options) {\n  return remove(this.toArray(), options);\n};\n\n$.fn.amLeave = function (options) {\n  return leave(this.toArray(), options);\n};\n\n$.fn.amInsertAfter = function (target, options) {\n  return insertAfter(this.toArray(), $(target)[0], options);\n};\n\n$.fn.amReplaceClasses = function (classNamesBefore, classNamesAfter, transitionName, options) {\n  return replaceClasses(this.toArray(), classNamesBefore, classNamesAfter, transitionName, options);\n};\n\nexport * from './vanilla.js';\n"],"names":["detachNode","node","parentNode","removeChild","prependNode","targetContainer","firstChild","insertBefore","appendChild","cloneNode","clone","innerHTML","attachNode","target","domOperation","insertAdjacentElement","Error","disableTransitions","style","transition","enableTransitions","waitUntilTransitionEnd","duration","getTransitionDuration","getTransitionDelay","Promise","resolve","getClassNames","element","className","getAttribute","split","toggleClass","force","classNames","idx","indexOf","hasClass","shouldHaveClass","undefined","splice","push","setAttribute","join","removeClass","addClass","stringToMilliSeconds","timeString","timeUnits","parsedTime","exec","parseFloat","window","getComputedStyle","transitionDuration","transitionDelay","forceReflow","offsetHeight","isDomElement","HTMLElement","nodeType","nodeName","enterAnimation","namespace","addClasses","removeClasses","operation","animationIndex","animation","leaveAnimation","morphAnimation","morphParent","leavePlaceholder","_createLeavePlaceholder","movePlaceholder","_createMovePlaceholder","forEach","all","moveAnimation","removeAnimation","then","options","targetPosition","_getElementPosition","parentPosition","top","left","position","animationName","onAnimationStart","_startAnimation","_removeAnimationClasses","elementPosition","body","staggeringDuration","_getStaggering","rect","getBoundingClientRect","offset","document","scrollTop","scrollLeft","delayWithoutStagger","delayWithStagger","animorph","operations","elements","Array","prototype","slice","call","map","contains","appendTo","prependTo","remove","leave","insertAfter","replaceClasses","classNamesBefore","classNamesAfter","transitionName","$","fn","amAppendTo","this","toArray","amPrependTo","amRemove","amLeave","amInsertAfter","amReplaceClasses"],"mappings":"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"}