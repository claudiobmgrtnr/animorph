{"version":3,"file":null,"sources":["../src/utils/dom-manipulation.js","../src/utils/request-animation-frame.js","../src/utils/animation.js","../src/vanilla.js","../src/jquery.js"],"sourcesContent":["/**\n * Removes the given element from it's parent\n *\n * @param  {HTMLElement} node The node to remove\n */\nexport function detachNode (node) {\n  // Detach from dom before any classes are added\n  if (node.parentNode) {\n    node.parentNode.removeChild(node);\n  }\n}\n\n/**\n * Adds the given element as the first child of the given parent\n *\n * @param  {HTMLElement} node The node to remove\n * @param  {HTMLElement} targetContainer The new parent\n */\nexport function prependNode (node, targetContainer) {\n  if (targetContainer.firstChild) {\n    targetContainer.insertBefore(node, targetContainer.firstChild);\n  } else {\n    targetContainer.appendChild(node);\n  }\n}\n\n/**\n * Clones a given Node an all its content\n * Needed as IE9 does not support node.clone(true)\n *\n * @param  {HTMLElement} node The node to clone\n * @returns  {HTMLElement}\n */\nexport function cloneNode (node) {\n  const clone = node.cloneNode(false);\n  clone.innerHTML = node.innerHTML;\n  return clone;\n}\n\n/**\n * Shorthand to attach a element to the dom\n *\n * @param  {HTMLElement} node The element which should be added\n * @param  {HTMLElement} target The reference element/parent\n * @param  {String} domOperation The dom operation name\n */\nexport function attachNode (node, target, domOperation) {\n  switch (domOperation) {\n    case 'appendTo':\n      target.appendChild(node);\n      break;\n    case 'prependTo':\n      prependNode(node, target);\n      break;\n    case 'insertAfter':\n      node.insertAdjacentElement('afterend', target);\n      break;\n    default:\n      throw new Error('Invalid dom operation');\n  }\n}\n\n/**\n * Disables all transitions for the given node\n *\n * @param  {HTMLElement} node The element\n */\nexport function disableTransitions (node) {\n  node.style.transition = 'none';\n}\n\n/**\n * Reverts disableTransitions\n *\n * @param  {HTMLElement} node The element\n */\nexport function enableTransitions (node) {\n  node.style.transition = '';\n}\n\n/**\n * Returns the absolute position of the node to the document\n *\n * @param  {HTMLElement} node The element to measure\n * @return {{left: {Number}, top: {Number} }\n */\nexport function getElementPosition (node) {\n  const rect = node.getBoundingClientRect();\n  const offset = {\n    top: rect.top + document.body.scrollTop,\n    left: rect.left + document.body.scrollLeft\n  };\n  return offset;\n}\n\n/**\n * Returns a Promise which is resolved after delay of (transition duration + transition delay).\n *\n * This is a replacement for onTransitionEnd as we can't guarantee that an animation started\n * and would wait forever.\n *\n * @param  {HTMLElement} node The element with a css-transition\n * @return {Promise}\n */\nexport function waitUntilTransitionEnd (node) {\n  const duration = getTransitionDuration(node);\n  return new Promise((resolve) => {\n    setTimeout(() => resolve(node), duration);\n  });\n}\n\n/**\n * Extract an array of all classNames of the given DOM or SVG node\n *\n * @param  {HTMLElement} element The element\n * @return {String[]} Classes\n */\nfunction getClassNames (element) {\n  const className = element.getAttribute && element.getAttribute('class') || '';\n  return className === '' ? [] : className.split(' ');\n}\n\n/**\n * Replacement for DomTokenList\n *\n * IE 9 doesn't support element classList and IE 11 doesn't support classList for SVG elements\n * see also https://developer.mozilla.org/en/docs/Web/API/Element/classList\n *\n * Usage:\n * toggleClass(div, 'demo'); // Toggles the class `demo`\n * toggleClass(div, 'demo', true); // Adds the class `demo`\n * toggleClass(div, 'demo', false); // removes the class `demo`\n *\n * @param  {HTMLElement} element The target node\n * @param  {String} className The class name to toggle\n * @param  {boolean} force Optional - true will allways add - false will alawys remove\n */\nexport function toggleClass (element, className, force) {\n  const classNames = getClassNames(element);\n  const idx = classNames.indexOf(className);\n  const hasClass = idx !== -1;\n  const shouldHaveClass = force !== undefined ? force : !hasClass;\n  // Break if classes are already set/removed\n  if (shouldHaveClass === hasClass) {\n    return;\n  }\n  // Remove class\n  if (!shouldHaveClass) {\n    classNames.splice(idx, 1);\n  }\n  // Add class\n  if (shouldHaveClass) {\n    classNames.push(className);\n  }\n  element.setAttribute('class', classNames.join(' '));\n}\n\n/**\n * Remove the given class name from the element\n * @param  {HTMLElement} element The DOM Node\n * @param  {String} className The class name\n */\nexport function removeClass (element, className) {\n  if (className === undefined) {\n    throw new Error('Class name is required');\n  }\n  toggleClass(element, className, false);\n}\n\n/**\n * Adds the given class name from the element\n * @param  {HTMLElement} element The DOM Node\n * @param  {String} className The class name\n */\nexport function addClass (element, className) {\n  if (className === undefined) {\n    throw new Error('Class name is required');\n  }\n  toggleClass(element, className, true);\n}\n\n/**\n * Turns \"2s\" or \"2000ms\" into 2000\n * @param  {string} timeString A unit postfixed time string\n * @return {number} milliseconds\n */\nfunction stringToMilliSeconds (timeString) {\n  const timeUnits = {\n    s: 1000,\n    ms: 1\n  };\n  const parsedTime = /([\\d\\.]+)\\s*(\\D+)/.exec(timeString);\n  return parsedTime ? parseFloat(parsedTime[1], 10) * timeUnits[parsedTime[2]] : 0;\n}\n\n/**\n * Returns the duration of an elements transition including the transition delay\n * @param  {HTMLElement} node The element to measure\n * @return {Number} time in milliseconds\n */\nexport function getTransitionDuration (node) {\n  const duration = stringToMilliSeconds(window.getComputedStyle(node).transitionDuration);\n  const delay = stringToMilliSeconds(window.getComputedStyle(node).transitionDelay);\n  return duration + delay;\n}\n","const requestAnimationFrame = window.requestAnimationFrame || setTimeout;\n\nexport function requestAnimationFramePromise () {\n  return new Promise((resolve) => requestAnimationFrame(resolve));\n}\n","import { addClass, removeClass, detachNode, attachNode, cloneNode, waitUntilTransitionEnd, enableTransitions, disableTransitions } from './dom-manipulation';\nimport { requestAnimationFramePromise } from './request-animation-frame';\n\n/**\n * An animation which adds the `enter` classes and adds the element to the dom\n *\n * @param  {String} namespace     The animation class namespace e.g. 'am'\n * @param  {String[]} addClasses  Classes which will be added once the animation starts\n * @param  {String[]} removeClasses Classes which will be removed once the animation starts\n * @param  {[type]} element       The element\n * @param  {[type]} target        Optional - needed as reference to add the element into DOM\n * @param  {[type]} operation     Optional - needed to add the element into DOM\n * @return {Promise} A promise which will be resolved once the animation is complete\n */\nexport function enterAnimation ({\n  namespace,\n  addClasses,\n  removeClasses,\n  element,\n  target,\n  operation\n}) {\n  if (target) {\n    attachNode(element, target, operation);\n  }\n  return animation({\n    namespace,\n    element,\n    addClasses,\n    removeClasses,\n    animationName: 'enter'\n  });\n}\n\n/**\n * An animation which adds the `leave` classes and adds the element to the dom\n *\n * @param  {String} namespace     The animation class namespace e.g. 'am'\n * @param  {[type]} element       [description]\n * @param  {String[]} addClasses  Classes which will be added once the animation starts\n * @param  {String[]} removeClasses Classes which will be removed once the animation starts\n * @return {Promise} A promise which will be resolved once the animation is complete\n */\nexport function leaveAnimation ({\n  namespace,\n  element,\n  addClasses,\n  removeClasses\n}) {\n  return animation({\n    namespace,\n    element,\n    addClasses,\n    removeClasses,\n    animationName: 'leave'\n  });\n}\n\n/**\n * An animation which morphs an element from its old position to its new position\n *\n * @param  {String} namespace        The animation class namespace e.g. 'am'\n * @param  {String[]} addClasses     Classes which will be added once the animation starts\n * @param  {String[]} removeClasses  Classes which will be removed once the animation starts\n * @param  {HTMLElement} element     The element to animate\n * @param  {HTMLElement} target      The reference target to attach the element into the DOM\n * @param  {HTMLElement} operation   The attach method\n * @param  {HTMLElement} morphParent The wrapper for the move clone\n * @return {Promise} A promise which will be resolved once the animation is complete\n */\nexport function morphAnimation ({\n  namespace,\n  addClasses,\n  removeClasses,\n  element,\n  target,\n  operation,\n  morphParent\n}) {\n  if (element instanceof window.HTMLElement === false) {\n    throw new Error('target is required');\n  }\n  // Create clones which are needed for the morph effect\n  const leavePlaceholder = _createLeavePlaceholder(element);\n  const movePlaceholder = _createMovePlaceholder(element, morphParent);\n  // Wait for all animations to finish\n  return Promise.all([\n    enterAnimation({\n      namespace,\n      addClasses,\n      removeClasses,\n      element,\n      target,\n      operation\n    }),\n    moveAnimation({\n      namespace,\n      addClasses,\n      removeClasses,\n      element: movePlaceholder,\n      morphParent,\n      target: element\n    }),\n    leaveAnimation({\n      namespace,\n      addClasses: [],\n      removeClasses: [],\n      element: leavePlaceholder\n    })\n  ]).then(() => {\n    detachNode(leavePlaceholder);\n    detachNode(movePlaceholder);\n  });\n}\n\n/**\n * This animation will add the leave classes and remove the element form the\n * DOM once the animation is complete\n *\n * @param  {Object} options All leaveAnimation options\n * @return {Promise}\n */\nexport function removeAnimation (options) {\n  return leaveAnimation(options).then(() => detachNode(options.element));\n}\n\n/**\n * Moves the given element to the target Position\n *\n * @param  {String} namespace     The animation class namespace e.g. 'am'\n * @param  {String[]} addClasses  Classes which will be added once the animation starts\n * @param  {String[]} removeClasses Classes which will be removed once the animation starts\n * @param  {[type]} element       [description]\n * @param  {[type]} target        [description]\n * @param  {[type]} morphParent   [description]\n * @return {Promise} A promise which will be resolved once the animation is complete\n */\nfunction moveAnimation ({\n  namespace,\n  addClasses,\n  removeClasses,\n  element,\n  target,\n  morphParent\n}) {\n  const targetPosition = _getElementPosition(target);\n  const parentPosition = _getElementPosition(morphParent);\n  const top = targetPosition.top - parentPosition.top;\n  const left = targetPosition.left - parentPosition.left;\n  return animation({\n    namespace,\n    element,\n    addClasses,\n    removeClasses,\n    animationName: 'leave',\n    onAnimationStart: () => {\n      element.setAttribute('style', `position: absolute; top: ${top}; left: ${left};`);\n    }\n  });\n}\n\n/**\n * Helper function which does the entire animation from start to cleanup\n *\n * @param  {String} namespace       The animation class namespace e.g. 'am'\n * @param  {String[]} addClasses    Classes which will be added once the animation starts\n * @param  {String[]} removeClasses Classes which will be removed once the animation starts\n * @param  {HTMLElement} element    The Element which to animate\n * @param  {HTMLElement} morphParent   [description]\n * @param  {function} [onAnimationStart=(] [description]\n * @return {Promise} A promise which will be resolved once the animation is complete\n */\nfunction animation ({\n  namespace,\n  addClasses,\n  removeClasses,\n  element,\n  animationName,\n  onAnimationStart = () => {}\n}) {\n  return _startAnimation({\n    namespace,\n    element,\n    addClasses,\n    removeClasses,\n    animationName\n  })\n  .then(onAnimationStart)\n  .then(() => waitUntilTransitionEnd(element))\n  .then(() => _removeAnimationClasses({\n    namespace,\n    element,\n    animationName\n  }));\n}\n\nfunction _createLeavePlaceholder (node) {\n  const clone = cloneNode(node);\n  node.insertAdjacentElement('afterend', clone);\n  return clone;\n}\n\n/**\n * Create a clone and place it absolute directly above the given node\n *\n * @param  {HTMLElement} node        The node to clone\n * @param  {HTMLElement} morphParent The parent for the clone\n * @return {HTMLElement} clone\n */\nfunction _createMovePlaceholder (node, morphParent) {\n  const clone = cloneNode(node);\n  const elementPosition = _getElementPosition(node);\n  const parentPosition = _getElementPosition(morphParent);\n  const top = elementPosition.top - parentPosition.top;\n  const left = elementPosition.left - parentPosition.left;\n  clone.setAttribute('style', `position: absolute; top: ${top}; left: ${left};`);\n  document.body.insertAdjacentElement('afterend', clone);\n  return clone;\n}\n\nfunction _startAnimation ({\n  namespace,\n  element,\n  addClasses,\n  removeClasses,\n  animationName = 'enter'\n}) {\n  disableTransitions(element);\n  addClass(element, `${namespace}-${animationName}-prepare`);\n  addClass(element, `${namespace}-${animationName}`);\n  addClass(element, `${namespace}-animate`);\n  return requestAnimationFramePromise().then(() => {\n    removeClass(element, `${namespace}-${animationName}-prepare`);\n    addClass(element, `${namespace}-${animationName}-active`);\n    addClasses.forEach((className) => addClass(element, className));\n    removeClasses.forEach((className) => removeClass(element, className));\n    enableTransitions(element);\n  });\n}\n\nfunction _getElementPosition (node) {\n  const rect = node.getBoundingClientRect();\n  const offset = {\n    top: rect.top + document.body.scrollTop,\n    left: rect.left + document.body.scrollLeft\n  };\n  return offset;\n}\n\nfunction _removeAnimationClasses ({element, animationName, namespace}) {\n  disableTransitions(element);\n  return requestAnimationFramePromise()\n  .then(() => {\n    removeClass(element, `${namespace}-animate`);\n    removeClass(element, `${namespace}-${animationName}`);\n    removeClass(element, `${namespace}-${animationName}-active`);\n    enableTransitions(element);\n  });\n}\n","import {\n  morphAnimation,\n  enterAnimation,\n  leaveAnimation,\n  removeAnimation\n} from './utils/animation';\n\n// Mapping of dom operation to animation\nconst operations = {\n  appendTo: morphAnimation,\n  prependTo: morphAnimation,\n  insertBefore: morphAnimation,\n  insertAfter: morphAnimation,\n  remove: removeAnimation,\n  enter: enterAnimation,\n  leave: leaveAnimation\n};\n\nexport function animorph (element, {\n  namespace = 'am',\n  addClasses = [],\n  removeClasses = [],\n  target,\n  operation = 'appendTo',\n  morphParent = document.body\n}) {\n  let animation = operations[operation];\n  if (!animation) {\n    throw new Error(`Invalid operation '${operation}'`);\n  }\n  if (element instanceof window.HTMLElement === false) {\n    throw new Error('Element is required');\n  }\n  // If we can't use a move animation fallback to an enter animation\n  if (animation === morphAnimation && !element.parentNode) {\n    animation = enterAnimation;\n  }\n  return animation({\n    namespace,\n    addClasses,\n    removeClasses,\n    element,\n    target,\n    operation,\n    morphParent\n  });\n}\n\nexport function appendTo (element, target, options = {}) {\n  return animorph(element, {\n    target,\n    ...options\n  });\n}\n\nexport function prependTo (element, target, options = {}) {\n  return animorph(element, {\n    target,\n    operation: 'prependTo',\n    ...options\n  });\n}\n\nexport function remove (element, options = {}) {\n  return animorph(element, {\n    operation: 'remove',\n    ...options\n  });\n}\n\nexport function insertAfter (element, target, options = {}) {\n  return animorph(element, {\n    target: target,\n    operation: 'insertAfter',\n    ...options\n  });\n}\n\n/**\n * Allows to animate from one set of classes to another\n *\n * @param  {HTMLElement} element        The element to animate\n * @param  {String[]} classNamesBefore  Class names before\n * @param  {String[]} classNamesAfter   Class names after\n * @param  {String} [transitionName]     Transition name (enter or leave)\n * @param  {Object} [options={}]        Animorph options like namespace\n * @return {Promise}                    Promise of the animation\n */\nexport function replaceClasses (element, classNamesBefore, classNamesAfter, transitionName = 'enter', options = {}) {\n  return animorph(element, {\n    addClasses: classNamesAfter,\n    removeClasses: classNamesBefore,\n    operation: transitionName,\n    ...options\n  });\n}\n","import {appendTo, prependTo, remove, insertAfter, replaceClasses} from './vanilla.js';\nimport $ from 'jquery';\n\n$.fn.amAppendTo = function (target, options) {\n  return this.each((element) => appendTo(element, $(target)[0], options));\n};\n\n$.fn.amPrependTo = function (target, options) {\n  return this.each((element) => prependTo(element, $(target)[0], options));\n};\n\n$.fn.amRemove = function (options) {\n  return this.each((element) => remove(element, options));\n};\n\n$.fn.amInsertAfter = function (target, options) {\n  return this.each((element) => insertAfter(element, $(target)[0], options));\n};\n\n$.fn.amReplaceClasses = function (classNamesBefore, classNamesAfter, transitionName, options) {\n  return this.each((element) => replaceClasses(element, classNamesBefore, classNamesAfter, transitionName, options));\n};\n"],"names":["detachNode","node","parentNode","removeChild","prependNode","targetContainer","firstChild","insertBefore","appendChild","cloneNode","clone","innerHTML","attachNode","target","domOperation","insertAdjacentElement","Error","disableTransitions","style","transition","enableTransitions","waitUntilTransitionEnd","duration","getTransitionDuration","Promise","resolve","getClassNames","element","className","getAttribute","split","toggleClass","force","classNames","idx","indexOf","hasClass","shouldHaveClass","undefined","splice","push","setAttribute","join","removeClass","addClass","stringToMilliSeconds","timeString","timeUnits","parsedTime","exec","parseFloat","window","getComputedStyle","transitionDuration","delay","transitionDelay","requestAnimationFrame","setTimeout","requestAnimationFramePromise","enterAnimation","namespace","addClasses","removeClasses","operation","animation","leaveAnimation","morphAnimation","morphParent","HTMLElement","leavePlaceholder","_createLeavePlaceholder","movePlaceholder","_createMovePlaceholder","all","moveAnimation","then","removeAnimation","options","targetPosition","_getElementPosition","parentPosition","top","left","animationName","onAnimationStart","_startAnimation","_removeAnimationClasses","elementPosition","body","forEach","rect","getBoundingClientRect","offset","document","scrollTop","scrollLeft","operations","animorph","appendTo","prependTo","remove","insertAfter","replaceClasses","classNamesBefore","classNamesAfter","transitionName","$","fn","amAppendTo","each","amPrependTo","amRemove","amInsertAfter","amReplaceClasses"],"mappings":"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"}