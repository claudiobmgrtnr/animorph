{"version":3,"file":null,"sources":["../src/utils/dom-manipulation.js","../src/utils/animation.js","../src/vanilla.js"],"sourcesContent":["/**\n * Removes the given element from it's parent\n *\n * @param  {HTMLElement} node The node to remove\n */\nexport function detachNode (node) {\n  // Detach from dom before any classes are added\n  if (node.parentNode) {\n    node.parentNode.removeChild(node);\n  }\n}\n\n/**\n * Adds the given element as the first child of the given parent\n *\n * @param  {HTMLElement} node The node to remove\n * @param  {HTMLElement} targetContainer The new parent\n */\nexport function prependNode (node, targetContainer) {\n  if (targetContainer.firstChild) {\n    targetContainer.insertBefore(node, targetContainer.firstChild);\n  } else {\n    targetContainer.appendChild(node);\n  }\n}\n\n/**\n * Clones a given Node an all its content\n * Needed as IE9 does not support node.clone(true)\n *\n * @param  {HTMLElement} node The node to clone\n * @returns  {HTMLElement}\n */\nexport function cloneNode (node) {\n  const clone = node.cloneNode(false);\n  clone.innerHTML = node.innerHTML;\n  return clone;\n}\n\n/**\n * Shorthand to attach a element to the dom\n *\n * @param  {HTMLElement} node The element which should be added\n * @param  {HTMLElement} target The reference element/parent\n * @param  {String} domOperation The dom operation name\n */\nexport function attachNode (node, target, domOperation) {\n  switch (domOperation) {\n    case 'appendTo':\n      target.appendChild(node);\n      break;\n    case 'prependTo':\n      prependNode(node, target);\n      break;\n    case 'insertAfter':\n      insertAfter(node, target);\n      break;\n    default:\n      throw new Error('Invalid dom operation');\n  }\n}\n\n/**\n * Disables all transitions for the given node\n *\n * @param  {HTMLElement} node The element\n */\nexport function disableTransitions (node) {\n  node.style.transition = 'none';\n}\n\n/**\n * Reverts disableTransitions\n *\n * @param  {HTMLElement} node The element\n */\nexport function enableTransitions (node) {\n  node.style.transition = '';\n}\n\n/**\n * Returns the absolute position of the node to the document\n *\n * @param  {HTMLElement} node The element to measure\n * @return {{left: {Number}, top: {Number} }\n */\nexport function getElementPosition (node) {\n  if (node === document.body) {\n    return { left: 0, top: 0 };\n  }\n  // Support: IE <=11 only\n  // Running getBoundingClientRect on a\n  // disconnected node in IE throws an error\n  if (!node.getClientRects().length) {\n    return { top: 0, left: 0 };\n  }\n  const rect = node.getBoundingClientRect();\n  if (rect.width || rect.height) {\n    const docElem = document.documentElement;\n    return {\n      top: rect.top + window.pageYOffset - docElem.clientTop,\n      left: rect.left + window.pageXOffset - docElem.clientLeft\n    };\n  }\n\n  // Return zeros for disconnected and hidden elements (gh-2310)\n  return rect;\n}\n\n/**\n * Returns a Promise which is resolved after delay of (transition duration + transition delay).\n *\n * This is a replacement for onTransitionEnd as we can't guarantee that an animation started\n * and would wait forever.\n *\n * @param  {HTMLElement} node The element with a css-transition\n * @return {Promise}\n */\nexport function waitUntilTransitionEnd (node) {\n  const duration = getTransitionDuration(node) + getTransitionDelay(node);\n  return new Promise((resolve) => {\n    setTimeout(() => resolve(node), duration);\n  });\n}\n\n/**\n * Extract an array of all classNames of the given DOM or SVG node\n *\n * @param  {HTMLElement} element The element\n * @return {String[]} Classes\n */\nfunction getClassNames (element) {\n  const className = element.getAttribute && element.getAttribute('class') || '';\n  return className === '' ? [] : className.split(' ');\n}\n\n/**\n * Replacement for DomTokenList\n *\n * IE 9 doesn't support element classList and IE 11 doesn't support classList for SVG elements\n * see also https://developer.mozilla.org/en/docs/Web/API/Element/classList\n *\n * Usage:\n * toggleClass(div, 'demo'); // Toggles the class `demo`\n * toggleClass(div, 'demo', true); // Adds the class `demo`\n * toggleClass(div, 'demo', false); // removes the class `demo`\n *\n * @param  {HTMLElement} element The target node\n * @param  {String} className The class name to toggle\n * @param  {boolean} force Optional - true will allways add - false will alawys remove\n */\nexport function toggleClass (element, className, force) {\n  const classNames = getClassNames(element);\n  const idx = classNames.indexOf(className);\n  const hasClass = idx !== -1;\n  const shouldHaveClass = force !== undefined ? force : !hasClass;\n  // Break if classes are already set/removed\n  if (shouldHaveClass === hasClass) {\n    return;\n  }\n  // Remove class\n  if (!shouldHaveClass) {\n    classNames.splice(idx, 1);\n  }\n  // Add class\n  if (shouldHaveClass) {\n    classNames.push(className);\n  }\n  element.setAttribute('class', classNames.join(' '));\n}\n\n/**\n * Remove the given class name from the element\n * @param  {HTMLElement} element The DOM Node\n * @param  {String} className The class name\n */\nexport function removeClass (element, className) {\n  if (className === undefined) {\n    throw new Error('Class name is required');\n  }\n  toggleClass(element, className, false);\n}\n\n/**\n * Adds the given class name from the element\n * @param  {HTMLElement} element The DOM Node\n * @param  {String} className The class name\n */\nexport function addClass (element, className) {\n  if (className === undefined) {\n    throw new Error('Class name is required');\n  }\n  toggleClass(element, className, true);\n}\n\n/**\n * Turns \"2s\" or \"2000ms\" into 2000\n * @param  {string} timeString A unit postfixed time string\n * @return {number} milliseconds\n */\nfunction stringToMilliSeconds (timeString) {\n  const timeUnits = {\n    s: 1000,\n    ms: 1\n  };\n  const parsedTime = /([\\d\\.]+)\\s*(\\D+)/.exec(timeString);\n  return parsedTime ? parseFloat(parsedTime[1], 10) * timeUnits[parsedTime[2]] : 0;\n}\n\n/**\n * Returns the duration of an elements transition\n * @param  {HTMLElement} node The element to measure\n * @return {Number} time in milliseconds\n */\nexport function getTransitionDuration (node) {\n  return stringToMilliSeconds(window.getComputedStyle(node).transitionDuration);\n}\n\n/**\n * Returns the delay of an elements transition\n * @param  {HTMLElement} node The element to measure\n * @return {Number} time in milliseconds\n */\nexport function getTransitionDelay (node) {\n  return stringToMilliSeconds(window.getComputedStyle(node).transitionDelay);\n}\n\n/**\n * Force a browser repaint to apply all current styles\n *\n * @param node\n */\nexport function forceReflow (node) {\n  return new Promise((resolve) => {\n    resolve(node.offsetHeight);\n  });\n}\n\n/**\n * Checks if node is a dom element\n * @param node\n * @returns {*}\n */\nexport function isDomElement (node) {\n  // For all modern browser\n  if (window.HTMLElement) {\n    return node instanceof window.HTMLElement;\n  }\n  // For IE9 <3\n  return node && typeof node === 'object' && node.nodeType === 1 && node.nodeName;\n}\n\n/**\n * Inserts a new node after a desired reference node.\n * @param referenceNode\n * @param newNode\n * @returns {Node}\n */\nexport function insertAfter (referenceNode, newNode) {\n  /*\n  * If referenceNode is the last child within its parent element, that's fine, because referenceNode.nextSibling\n  * will be null and insertBefore handles that case by adding to the end of the parent\n  */\n  return referenceNode.parentNode.insertBefore(newNode, referenceNode.nextSibling);\n}\n","import {\n  addClass,\n  removeClass,\n  getElementPosition,\n  detachNode,\n  attachNode,\n  cloneNode,\n  waitUntilTransitionEnd,\n  enableTransitions,\n  disableTransitions,\n  getTransitionDelay,\n  forceReflow,\n  insertAfter\n} from './dom-manipulation';\n\n/**\n * An animation which adds the `enter` classes and adds the element to the dom\n *\n * @param  {String} namespace       The animation class namespace e.g. 'am'\n * @param  {String[]} addClasses    Classes which will be added once the animation starts\n * @param  {String[]} removeClasses Classes which will be removed once the animation starts\n * @param  {HTMLElement} element    The element\n * @param  {HTMLElement} target     Optional - needed as reference for the new DOM position\n * @param  {\"appendTo\"|\"prependTo\"|\"insertAfter\"} operation  Dom operation\n * @return {Promise} A promise which will be resolved once the animation is complete\n */\nexport function enterAnimation ({\n  namespace,\n  addClasses,\n  removeClasses,\n  element,\n  target,\n  operation,\n  animationIndex\n}) {\n  if (target) {\n    attachNode(element, target, operation);\n  }\n  return animation({\n    namespace,\n    element,\n    addClasses,\n    removeClasses,\n    animationIndex,\n    animationName: 'enter'\n  });\n}\n\n/**\n * An animation which adds the `leave` classes and adds the element to the dom\n *\n * @param  {String} namespace     The animation class namespace e.g. 'am'\n * @param  {HTMLElement} element  [description]\n * @param  {String[]} addClasses  Classes which will be added once the animation starts\n * @param  {String[]} removeClasses Classes which will be removed once the animation starts\n * @return {Promise} A promise which will be resolved once the animation is complete\n */\nexport function leaveAnimation ({\n  namespace,\n  element,\n  addClasses,\n  removeClasses,\n  animationIndex\n}) {\n  return animation({\n    namespace,\n    element,\n    addClasses,\n    removeClasses,\n    animationIndex,\n    animationName: 'leave'\n  });\n}\n\n/**\n * An animation which morphs an element from its old position to its new position\n *\n * @param  {String} namespace        The animation class namespace e.g. 'am'\n * @param  {String[]} addClasses     Classes which will be added once the animation starts\n * @param  {String[]} removeClasses  Classes which will be removed once the animation starts\n * @param  {HTMLElement} element     The element to animate\n * @param  {HTMLElement} target      The reference target to attach the element into the DOM\n * @param  {HTMLElement} operation   The attach method\n * @param  {HTMLElement} morphParent The wrapper for the move clone\n * @return {Promise} A promise which will be resolved once the animation is complete\n */\nexport function morphAnimation ({\n  namespace,\n  addClasses,\n  removeClasses,\n  element,\n  target,\n  operation,\n  morphParent,\n  animationIndex\n}) {\n  if (element instanceof window.HTMLElement === false) {\n    throw new Error('target is required');\n  }\n  // Create clones which are needed for the morph effect\n  const leavePlaceholder = _createLeavePlaceholder(element);\n  const movePlaceholder = _createMovePlaceholder(element, morphParent);\n  // Add final classes for the enter element to determine the correct target position\n  addClasses.forEach((className) => addClass(element, className));\n  removeClasses.forEach((className) => removeClass(element, className));\n  // Wait for all animations to finish\n  return Promise.all([\n    enterAnimation({\n      namespace,\n      addClasses: [],\n      removeClasses: [],\n      element,\n      target,\n      operation,\n      animationIndex\n    }),\n    moveAnimation({\n      namespace,\n      addClasses,\n      removeClasses,\n      element: movePlaceholder,\n      morphParent,\n      target: element,\n      animationIndex\n    }),\n    removeAnimation({\n      namespace,\n      addClasses: [],\n      removeClasses: [],\n      element: leavePlaceholder,\n      animationIndex\n    })\n  ]).then(() => {\n    detachNode(movePlaceholder);\n  });\n}\n\n/**\n * This animation will add the leave classes and remove the element form the\n * DOM once the animation is complete\n *\n * @param  {Object} options All leaveAnimation options\n * @return {Promise}\n */\nexport function removeAnimation (options) {\n  return leaveAnimation(options).then(() => detachNode(options.element));\n}\n\n/**\n * Moves the given element to the target Position\n *\n * @param  {String} namespace     The animation class namespace e.g. 'am'\n * @param  {String[]} addClasses  Classes which will be added once the animation starts\n * @param  {String[]} removeClasses Classes which will be removed once the animation starts\n * @param  {HTMLElement} element  [description]\n * @param  {[type]} target        [description]\n * @param  {[type]} morphParent   [description]\n * @return {Promise} A promise which will be resolved once the animation is complete\n */\nfunction moveAnimation ({\n  namespace,\n  addClasses,\n  removeClasses,\n  element,\n  target,\n  morphParent,\n  animationIndex\n}) {\n  const targetPosition = getElementPosition(target);\n  const parentPosition = getElementPosition(morphParent);\n  const targetStyles = window.getComputedStyle(target);\n\n  const top = targetPosition.top - parentPosition.top - parseFloat(targetStyles.marginTop);\n  const left = targetPosition.left - parentPosition.left - parseFloat(targetStyles.marginLeft);\n\n  return animation({\n    namespace,\n    element,\n    addClasses,\n    removeClasses,\n    animationIndex,\n    animationName: 'move',\n    onAnimationStart: () => {\n      element.style.position = 'absolute';\n      element.style.left = `${left}px`;\n      element.style.top = `${top}px`;\n    }\n  });\n}\n\n/**\n * Helper function which does the entire animation from start to cleanup\n *\n * @param  {String} namespace       The animation class namespace e.g. 'am'\n * @param  {String[]} addClasses    Classes which will be added once the animation starts\n * @param  {String[]} removeClasses Classes which will be removed once the animation starts\n * @param  {HTMLElement} element    The Element which to animate\n * @param  {HTMLElement} morphParent   [description]\n * @param  {function} [onAnimationStart] [description]\n * @return {Promise} A promise which will be resolved once the animation is complete\n */\nfunction animation ({\n  namespace,\n  addClasses,\n  removeClasses,\n  element,\n  animationName,\n  animationIndex,\n  onAnimationStart = () => {}\n}) {\n  return _startAnimation({\n    namespace,\n    element,\n    addClasses,\n    removeClasses,\n    animationName,\n    animationIndex\n  })\n  .then(onAnimationStart)\n  .then(() => waitUntilTransitionEnd(element))\n  .then(() => _removeAnimationClasses({\n    namespace,\n    element,\n    animationName\n  }));\n}\n\nfunction _createLeavePlaceholder (node) {\n  const clone = cloneNode(node);\n  insertAfter(node, clone);\n  return clone;\n}\n\n/**\n * Create a clone and place it absolute directly above the given node\n *\n * @param  {HTMLElement} node        The node to clone\n * @param  {HTMLElement} morphParent The parent for the clone\n * @return {HTMLElement} clone\n */\nfunction _createMovePlaceholder (node, morphParent) {\n  const clone = cloneNode(node);\n  const elementPosition = getElementPosition(node);\n  const parentPosition = getElementPosition(morphParent);\n  const nodeStyles = window.getComputedStyle(node);\n  const top = elementPosition.top - parentPosition.top - parseFloat(nodeStyles.marginTop);\n  const left = elementPosition.left - parentPosition.left - parseFloat(nodeStyles.marginLeft);\n\n  clone.style.position = 'absolute';\n  clone.style.left = `${left}px`;\n  clone.style.top = `${top}px`;\n  morphParent.appendChild(clone);\n  return clone;\n}\n\nfunction _startAnimation ({\n  namespace,\n  element,\n  addClasses,\n  removeClasses,\n  animationIndex,\n  animationName = 'enter'\n}) {\n  const staggeringDuration = animationIndex === 0 ? 0 : _getStaggering({element, animationIndex, animationName, namespace});\n  disableTransitions(element);\n  addClass(element, `${namespace}-${animationName}-prepare`);\n  addClass(element, `${namespace}-${animationName}`);\n  addClass(element, `${namespace}-animate`);\n  return new Promise((resolve) => {\n    setTimeout(resolve, staggeringDuration);\n  }).then(() => forceReflow(element).then(() => {\n    forceReflow(element);\n    removeClass(element, `${namespace}-${animationName}-prepare`);\n    addClass(element, `${namespace}-${animationName}-active`);\n    addClasses.forEach((className) => addClass(element, className));\n    removeClasses.forEach((className) => removeClass(element, className));\n    enableTransitions(element);\n  }));\n}\n\nfunction _removeAnimationClasses ({element, animationName, namespace}) {\n  disableTransitions(element);\n  return forceReflow(element)\n  .then(() => {\n    removeClass(element, `${namespace}-animate`);\n    removeClass(element, `${namespace}-${animationName}`);\n    removeClass(element, `${namespace}-${animationName}-active`);\n    enableTransitions(element);\n  });\n}\n\n/**\n * Adds the stagger classes measure the stagger duration and removes\n * the classes again.\n */\nfunction _getStaggering ({element, animationIndex, animationName, namespace}) {\n  const delayWithoutStagger = getTransitionDelay(element);\n  addClass(element, `${namespace}-stagger`);\n  addClass(element, `${namespace}-${animationName}-stagger`);\n  const delayWithStagger = getTransitionDelay(element);\n  removeClass(element, `${namespace}-stagger`);\n  removeClass(element, `${namespace}-${animationName}-stagger`);\n  // If there is no difference with or without the stagger class\n  // asume that there is no staggering\n  return delayWithoutStagger === delayWithStagger ? 0 : delayWithStagger * animationIndex;\n}\n","import {\n  morphAnimation,\n  enterAnimation,\n  leaveAnimation,\n  removeAnimation\n} from './utils/animation';\n\nimport {\n  isDomElement\n} from './utils/dom-manipulation';\n\n// Mapping of dom operation to animation\nconst operations = {\n  appendTo: morphAnimation,\n  prependTo: morphAnimation,\n  insertBefore: morphAnimation,\n  insertAfter: morphAnimation,\n  remove: removeAnimation,\n  enter: enterAnimation,\n  leave: leaveAnimation\n};\n\nexport function animorph (element, {\n  namespace = 'am',\n  addClasses = [],\n  removeClasses = [],\n  target,\n  operation = 'appendTo',\n  morphParent = document.body\n}) {\n  let animation = operations[operation];\n  if (!animation) {\n    throw new Error(`Invalid operation '${operation}'`);\n  }\n\n  if (typeof addClasses === 'string') {\n    addClasses = addClasses.split(/\\s*(?:\\s|,)\\s*/);\n  }\n\n  if (typeof removeClasses === 'string') {\n    removeClasses = removeClasses.split(/\\s*(?:\\s|,)\\s*/);\n  }\n  // Turn element from a single element or a node list or an array to an array:\n  const elements = isDomElement(element) ? [element] : Array.prototype.slice.call(element);\n  return Promise.all(elements.map((element, animationIndex) => {\n    if (!isDomElement(element)) {\n      throw new Error('Element is required');\n    }\n    // If we can't use a move animation fallback to an enter animation\n    if (animation === morphAnimation && !morphParent.contains(element)) {\n      animation = enterAnimation;\n    }\n    return animation({\n      animationIndex,\n      namespace,\n      addClasses,\n      removeClasses,\n      element,\n      target,\n      operation,\n      morphParent\n    });\n  }));\n}\n\n/**\n * Inserts the given element as last child to the given target.\n * If the element was in the dom before it is animated\n * from the old position to the new position.\n *\n * @jsfiddle https://jsfiddle.net/aoz5y2n7/3/embedded/\n * @param  {HTMLElement} element   The element to animate\n * @param  {Object} [options]      Animorph options like namespace @see animorph\n * @return {Promise}               Promise of the animation\n */\nexport function appendTo (element, target, options = {}) {\n  return animorph(element, {\n    target,\n    ...options\n  });\n}\n\n/**\n * Inserts the given element as first child to the given target.\n * If the element was in the dom before it is animated\n * from the old position to the new position.\n *\n * @param  {HTMLElement} element   The element to animate\n * @param  {Object} [options]      Animorph options like namespace @see animorph\n * @return {Promise}               Promise of the animation\n */\nexport function prependTo (element, target, options = {}) {\n  return animorph(element, {\n    target,\n    operation: 'prependTo',\n    ...options\n  });\n}\n\n/**\n * Animate the given element and removes it from the dom after\n * the animation is complete\n *\n * @param  {HTMLElement} element   The element to animate\n * @param  {Object} [options]      Animorph options like namespace @see animorph\n * @return {Promise}               Promise of the animation\n */\nexport function remove (element, options = {}) {\n  return animorph(element, {\n    operation: 'remove',\n    ...options\n  });\n}\n\n/**\n * Adds classes for an enter animation\n *\n * Flow:\n *\n * 1. Changes the classes (without animation)\n *    + Add: `${namespace}-enter-prepare`\n *    + Add: `${namespace}-enter`\n *    + Add: `${namespace}-animate`\n * 2. Changes the classes (with animation)\n *    + Add: `${namespace}-enter-active`\n *    + Remove: `${namespace}-enter-prepare`\n * 4. Waits for the animation to end\n * 5. Changes the classes (without animation)\n *    + Remove: `${namespace}-enter-active`\n *    + Remove: `${namespace}-enter`\n *    + Remove: `${namespace}-animate`\n * 6. Fullfills the promise\n *\n * @param  {HTMLElement} element   The element to animate\n * @param  {Object} [options]      Animorph options like namespace @see animorph\n * @return {Promise}               Promise of the animation\n */\nexport function enter (element, options = {}) {\n  return animorph(element, {\n    operation: 'enter',\n    ...options\n  });\n}\n\n/**\n * Adds classes for a leave animation\n *\n * Flow:\n *\n * 1. Changes the classes (without animation)\n *    + Add: `${namespace}-leave-prepare`\n *    + Add: `${namespace}-leave`\n *    + Add: `${namespace}-animate`\n * 2. Changes the classes (with animation)\n *    + Add: `${namespace}-leave-active`\n *    + Remove: `${namespace}-leave-prepare`\n * 4. Waits for the animation to end\n * 5. Changes the classes (without animation)\n *    + Remove: `${namespace}-leave-active`\n *    + Remove: `${namespace}-leave`\n *    + Remove: `${namespace}-animate`\n * 6. Fullfills the promise\n *\n * @param  {HTMLElement} element   The element to animate\n * @param  {Object} [options]      Animorph options like namespace @see animorph\n * @return {Promise}               Promise of the animation\n */\nexport function leave (element, options = {}) {\n  return animorph(element, {\n    operation: 'leave',\n    ...options\n  });\n}\n\n/**\n * Inserts the given element to the dom after the given target.\n * If the element was in the dom before it is animated\n * from the old position to the new position.\n *\n * @param  {HTMLElement} element   The element to animate\n * @param  {Object} [options]      Animorph options like namespace @see animorph\n * @return {Promise}               Promise of the animation\n */\nexport function insertAfter (element, target, options = {}) {\n  return animorph(element, {\n    target: target,\n    operation: 'insertAfter',\n    ...options\n  });\n}\n\n/**\n * Adds and removes css-classes from the given element.\n *\n * Flow:\n *\n * 1. Changes the classes (without animation)\n *    + Add: `${namespace}-${transitionName}-prepare`\n *    + Add: `${namespace}-${transitionName}`\n *    + Add: `${namespace}-animate`\n * 2. Changes the classes (with animation)\n *    + Add: `${namespace}-${transitionName}-active`\n *    + Add: custom class names (optional)\n *    + Remove: `${namespace}-${transitionName}-prepare`\n *    + Remove: custom class names (optional)\n * 4. Waits for the animation to end\n * 5. Changes the classes (without animation)\n *    + Remove: `${namespace}-${transitionName}-active`\n *    + Remove: `${namespace}-${transitionName}`\n *    + Remove: `${namespace}-animate`\n * 6. Fullfills the promise\n *\n * @param  {HTMLElement} element        The element to animate\n * @param  {String[]} classNamesBefore  Custom classes to be removed\n * @param  {String[]} classNamesAfter   Custom classes to be added\n * @param  {String} [\"enter\"|\"leave\"]   Transition name: \"enter\"|\"leave\"\n * @param  {Object} [options]           Animorph options like namespace @see animorph\n * @return {Promise}                    Promise of the animation\n */\nexport function replaceClasses (element, classNamesBefore, classNamesAfter, transitionName = 'enter', options = {}) {\n  return animorph(element, {\n    addClasses: classNamesAfter,\n    removeClasses: classNamesBefore,\n    operation: transitionName,\n    ...options\n  });\n}\n"],"names":["detachNode","node","parentNode","removeChild","prependNode","targetContainer","firstChild","insertBefore","appendChild","cloneNode","clone","innerHTML","attachNode","target","domOperation","Error","disableTransitions","style","transition","enableTransitions","getElementPosition","document","body","left","top","getClientRects","length","rect","getBoundingClientRect","width","height","docElem","documentElement","window","pageYOffset","clientTop","pageXOffset","clientLeft","waitUntilTransitionEnd","duration","getTransitionDuration","getTransitionDelay","Promise","resolve","getClassNames","element","className","getAttribute","split","toggleClass","force","classNames","idx","indexOf","hasClass","shouldHaveClass","undefined","splice","push","setAttribute","join","removeClass","addClass","stringToMilliSeconds","timeString","timeUnits","parsedTime","exec","parseFloat","getComputedStyle","transitionDuration","transitionDelay","forceReflow","offsetHeight","isDomElement","HTMLElement","nodeType","nodeName","insertAfter","referenceNode","newNode","nextSibling","enterAnimation","namespace","addClasses","removeClasses","operation","animationIndex","animation","leaveAnimation","morphAnimation","morphParent","leavePlaceholder","_createLeavePlaceholder","movePlaceholder","_createMovePlaceholder","forEach","all","moveAnimation","removeAnimation","then","options","targetPosition","parentPosition","targetStyles","marginTop","marginLeft","position","animationName","onAnimationStart","_startAnimation","_removeAnimationClasses","elementPosition","nodeStyles","staggeringDuration","_getStaggering","delayWithoutStagger","delayWithStagger","animorph","operations","elements","Array","prototype","slice","call","map","contains","appendTo","prependTo","remove","enter","leave","replaceClasses","classNamesBefore","classNamesAfter","transitionName"],"mappings":"sMAKA,SAAgBA,GAAYC,GAEtBA,EAAKC,cACFA,WAAWC,YAAYF,GAUhC,QAAgBG,GAAaH,EAAMI,GAC7BA,EAAgBC,aACFC,aAAaN,EAAMI,EAAgBC,cAEnCE,YAAYP,GAWhC,QAAgBQ,GAAWR,MACnBS,GAAQT,EAAKQ,WAAU,YACvBE,UAAYV,EAAKU,UAChBD,EAUT,QAAgBE,GAAYX,EAAMY,EAAQC,UAChCA,OACD,aACIN,YAAYP,aAEhB,cACSA,EAAMY,aAEf,gBACSZ,EAAMY,sBAGZ,IAAIE,OAAM,0BAStB,QAAgBC,GAAoBf,KAC7BgB,MAAMC,WAAa,OAQ1B,QAAgBC,GAAmBlB,KAC5BgB,MAAMC,WAAa,GAS1B,QAAgBE,GAAoBnB,MAC9BA,IAASoB,SAASC,YACXC,KAAM,EAAGC,IAAK,OAKpBvB,EAAKwB,iBAAiBC,cAChBF,IAAK,EAAGD,KAAM,MAEnBI,GAAO1B,EAAK2B,2BACdD,EAAKE,OAASF,EAAKG,OAAQ,IACvBC,GAAUV,SAASW,2BAElBL,EAAKH,IAAMS,OAAOC,YAAcH,EAAQI,eACvCR,EAAKJ,KAAOU,OAAOG,YAAcL,EAAQM,kBAK5CV,GAYT,QAAgBW,GAAwBrC,MAChCsC,GAAWC,EAAsBvC,GAAQwC,EAAmBxC,SAC3D,IAAIyC,SAAQ,SAACC,cACP,iBAAMA,GAAQ1C,IAAOsC,KAUpC,QAASK,GAAeC,MAChBC,GAAYD,EAAQE,cAAgBF,EAAQE,aAAa,UAAY,SACtD,KAAdD,KAAwBA,EAAUE,MAAM,KAkBjD,QAAgBC,GAAaJ,EAASC,EAAWI,MACzCC,GAAaP,EAAcC,GAC3BO,EAAMD,EAAWE,QAAQP,GACzBQ,EAAWF,KAAQ,EACnBG,EAA4BC,SAAVN,EAAsBA,GAASI,CAEnDC,KAAoBD,IAInBC,KACQE,OAAOL,EAAK,GAGrBG,KACSG,KAAKZ,KAEVa,aAAa,QAASR,EAAWS,KAAK,OAQhD,QAAgBC,GAAahB,EAASC,MAClBU,SAAdV,OACI,IAAI/B,OAAM,4BAEN8B,EAASC,GAAW,GAQlC,QAAgBgB,GAAUjB,EAASC,MACfU,SAAdV,OACI,IAAI/B,OAAM,4BAEN8B,EAASC,GAAW,GAQlC,QAASiB,GAAsBC,MACvBC,MACD,OACC,GAEAC,EAAa,oBAAoBC,KAAKH,SACrCE,GAAaE,WAAWF,EAAW,GAAI,IAAMD,EAAUC,EAAW,IAAM,EAQjF,QAAgB1B,GAAuBvC,SAC9B8D,GAAqB9B,OAAOoC,iBAAiBpE,GAAMqE,oBAQ5D,QAAgB7B,GAAoBxC,SAC3B8D,GAAqB9B,OAAOoC,iBAAiBpE,GAAMsE,iBAQ5D,QAAgBC,GAAavE,SACpB,IAAIyC,SAAQ,SAACC,KACV1C,EAAKwE,gBASjB,QAAgBC,GAAczE,SAExBgC,QAAO0C,YACF1E,YAAgBgC,QAAO0C,YAGzB1E,GAAwB,+BAATA,iBAAAA,KAAuC,IAAlBA,EAAK2E,UAAkB3E,EAAK4E,SASzE,QAAgBC,GAAaC,EAAeC,SAKnCD,GAAc7E,WAAWK,aAAayE,EAASD,EAAcE,aC7OtE,QAAgBC,SACdC,KAAAA,UACAC,IAAAA,WACAC,IAAAA,cACAxC,IAAAA,QACAhC,IAAAA,OACAyE,IAAAA,UACAC,IAAAA,qBAEI1E,MACSgC,EAAShC,EAAQyE,GAEvBE,qFAMU,UAanB,QAAgBC,SACdN,KAAAA,UACAtC,IAAAA,QACAuC,IAAAA,WACAC,IAAAA,cACAE,IAAAA,qBAEOC,sFAMU,UAgBnB,QAAgBE,SACdP,KAAAA,UACAC,IAAAA,WACAC,IAAAA,cACAxC,IAAAA,QACAhC,IAAAA,OACAyE,IAAAA,UACAK,IAAAA,YACAJ,IAAAA,kBAEI1C,YAAmBZ,QAAO0C,cAAgB,OACtC,IAAI5D,OAAM,yBAGZ6E,GAAmBC,EAAwBhD,GAC3CiD,EAAkBC,EAAuBlD,EAAS8C,YAE7CK,QAAQ,SAAClD,SAAcgB,GAASjB,EAASC,OACtCkD,QAAQ,SAAClD,SAAce,GAAYhB,EAASC,KAEnDJ,QAAQuD,KACbf,gGASAgB,oDAIWJ,uBAEDjD,qBAGVsD,sDAIWP,uBAGVQ,KAAK,aACKN,KAWf,QAAgBK,GAAiBE,SACxBZ,GAAeY,GAASD,KAAK,iBAAMpG,GAAWqG,EAAQxD,WAc/D,QAASqD,SACPf,KAAAA,UACAC,IAAAA,WACAC,IAAAA,cACAxC,IAAAA,QACAhC,IAAAA,OACA8E,IAAAA,YACAJ,IAAAA,eAEMe,EAAiBlF,EAAmBP,GACpC0F,EAAiBnF,EAAmBuE,GACpCa,EAAevE,OAAOoC,iBAAiBxD,GAEvCW,EAAM8E,EAAe9E,IAAM+E,EAAe/E,IAAM4C,WAAWoC,EAAaC,WACxElF,EAAO+E,EAAe/E,KAAOgF,EAAehF,KAAO6C,WAAWoC,EAAaE,kBAE1ElB,sFAMU,wBACG,aACRvE,MAAM0F,SAAW,aACjB1F,MAAMM,KAAUA,SAChBN,MAAMO,IAASA,UAgB7B,QAASgE,SACPL,KAAAA,UACAC,IAAAA,WACAC,IAAAA,cACAxC,IAAAA,QACA+D,IAAAA,cACArB,IAAAA,mBACAsB,iBAAAA,aAAmB,qBAEZC,0FAQNV,KAAKS,GACLT,KAAK,iBAAM9D,GAAuBO,KAClCuD,KAAK,iBAAMW,8CAOd,QAASlB,GAAyB5F,MAC1BS,GAAQD,EAAUR,YACZA,EAAMS,GACXA,EAUT,QAASqF,GAAwB9F,EAAM0F,MAC/BjF,GAAQD,EAAUR,GAClB+G,EAAkB5F,EAAmBnB,GACrCsG,EAAiBnF,EAAmBuE,GACpCsB,EAAahF,OAAOoC,iBAAiBpE,GACrCuB,EAAMwF,EAAgBxF,IAAM+E,EAAe/E,IAAM4C,WAAW6C,EAAWR,WACvElF,EAAOyF,EAAgBzF,KAAOgF,EAAehF,KAAO6C,WAAW6C,EAAWP,qBAE1EzF,MAAM0F,SAAW,aACjB1F,MAAMM,KAAUA,SAChBN,MAAMO,IAASA,SACThB,YAAYE,GACjBA,EAGT,QAASoG,SACP3B,KAAAA,UACAtC,IAAAA,QACAuC,IAAAA,WACAC,IAAAA,cACAE,IAAAA,mBACAqB,cAAAA,aAAgB,UAEVM,EAAwC,IAAnB3B,EAAuB,EAAI4B,GAAgBtE,UAAS0C,iBAAgBqB,gBAAezB,uBAC3FtC,KACVA,EAAYsC,MAAayB,gBACzB/D,EAAYsC,MAAayB,KACzB/D,EAAYsC,cACd,GAAIzC,SAAQ,SAACC,cACPA,EAASuE,KACnBd,KAAK,iBAAM5B,GAAY3B,GAASuD,KAAK,aAC1BvD,KACAA,EAAYsC,MAAayB,gBAC5B/D,EAAYsC,MAAayB,eACvBZ,QAAQ,SAAClD,SAAcgB,GAASjB,EAASC,OACtCkD,QAAQ,SAAClD,SAAce,GAAYhB,EAASC,OACxCD,OAItB,QAASkE,SAA0BlE,KAAAA,QAAS+D,IAAAA,cAAezB,IAAAA,mBACtCtC,GACZ2B,EAAY3B,GAClBuD,KAAK,aACQvD,EAAYsC,gBACZtC,EAAYsC,MAAayB,KACzB/D,EAAYsC,MAAayB,eACnB/D,KAQtB,QAASsE,SAAiBtE,KAAAA,QAAS0C,IAAAA,eAAgBqB,IAAAA,cAAezB,IAAAA,UAC1DiC,EAAsB3E,EAAmBI,KACtCA,EAAYsC,gBACZtC,EAAYsC,MAAayB,iBAC5BS,GAAmB5E,EAAmBI,YAChCA,EAAYsC,gBACZtC,EAAYsC,MAAayB,cAG9BQ,IAAwBC,EAAmB,EAAIA,EAAmB9B,EC1R3E,QAAgB+B,GAAUzE,aACxBsC,UAAAA,aAAY,WACZC,WAAAA,sBACAC,cAAAA,kBACAxE,IAAAA,WACAyE,UAAAA,aAAY,iBACZK,YAAAA,aAActE,SAASC,OAEnBkE,EAAY+B,EAAWjC,OACtBE,OACG,IAAIzE,6BAA4BuE,MAGd,iBAAfF,OACIA,EAAWpC,MAAM,mBAGH,gBAAlBqC,OACOA,EAAcrC,MAAM,sBAGhCwE,GAAW9C,EAAa7B,IAAYA,GAAW4E,MAAMC,UAAUC,MAAMC,KAAK/E,SACzEH,SAAQuD,IAAIuB,EAASK,IAAI,SAAChF,EAAS0C,OACnCb,EAAa7B,QACV,IAAI9B,OAAM,6BAGdyE,KAAcE,GAAmBC,EAAYmC,SAASjF,OAC5CqC,GAEPM,+GAuBX,QAAgBuC,GAAUlF,EAAShC,MAAQwF,mEAClCiB,GAASzE,eAEXwD,IAaP,QAAgB2B,GAAWnF,EAAShC,MAAQwF,mEACnCiB,GAASzE,wBAEH,aACRwD,IAYP,QAAgB4B,GAAQpF,MAASwD,mEACxBiB,GAASzE,eACH,UACRwD,IA2BP,QAAgB6B,GAAOrF,MAASwD,mEACvBiB,GAASzE,eACH,SACRwD,IA2BP,QAAgB8B,GAAOtF,MAASwD,mEACvBiB,GAASzE,eACH,SACRwD,IAaP,QAAgBvB,GAAajC,EAAShC,MAAQwF,mEACrCiB,GAASzE,YACNhC,YACG,eACRwF,IAgCP,QAAgB+B,GAAgBvF,EAASwF,EAAkBC,MAAiBC,0DAAiB,QAASlC,kEAC7FiB,GAASzE,gBACFyF,gBACGD,YACJE,GACRlC,wXApNDkB,YACM7B,YACCA,eACGA,cACDA,SACLS,QACDjB,QACAO"}